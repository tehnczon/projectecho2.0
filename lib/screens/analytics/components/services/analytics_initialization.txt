import 'package:cloud_firestore/cloud_firestore.dart';
import 'analytics_processing_service.dart';

class AnalyticsInitialization {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Initialize the analytics system
  /// Call this once when the app starts or after significant data updates
  static Future<void> initializeAnalytics() async {
    try {
      print('Initializing analytics system...');

      // Check if analytics summary exists
      final summaryDoc =
          await _firestore.collection('analytics_summary').doc('current').get();

      if (!summaryDoc.exists) {
        print('No analytics summary found. Creating initial summary...');
        await AnalyticsProcessingService.updateAnalyticsSummary();
      } else {
        final lastUpdated = summaryDoc.data()?['lastUpdated'] as Timestamp?;
        if (lastUpdated != null) {
          final timeSinceUpdate = DateTime.now().difference(
            lastUpdated.toDate(),
          );

          // If data is older than 1 hour, refresh it
          if (timeSinceUpdate.inHours > 1) {
            print('Analytics data is stale. Refreshing...');
            await AnalyticsProcessingService.updateAnalyticsSummary();
          }
        }
      }

      print('Analytics system initialized successfully');
    } catch (e) {
      print('Failed to initialize analytics system: $e');
      // Don't throw - let the app continue even if analytics fails
    }
  }

  /// Create initial admin/researcher roles
  static Future<void> createInitialRoles() async {
    try {
      final users = await _firestore.collection('users').get();
      final batch = _firestore.batch();

      for (var userDoc in users.docs) {
        final roleRef = _firestore.collection('user_roles').doc(userDoc.id);
        final data = userDoc.data();

        // Example: if "role" is already stored in `users` collection
        if (data['role'] == 'researcher') {
          final existing = await roleRef.get();
          if (!existing.exists) {
            batch.set(roleRef, {
              'role': 'researcher',
              'createdAt': FieldValue.serverTimestamp(),
              'createdBy': 'system_init',
            });
          }
        }
      }

      await batch.commit();
      print("Initial researcher roles synced from users collection");
    } catch (e) {
      print('Error creating initial roles: $e');
    }
  }

  /// Get system status for debugging
  static Future<Map<String, dynamic>> getSystemStatus() async {
    try {
      final analyticDataCount = await _firestore
          .collection('analyticData')
          .count()
          .get()
          .then((snapshot) => snapshot.count ?? 0);

      final summaryDoc =
          await _firestore.collection('analytics_summary').doc('current').get();

      final historyCount = await _firestore
          .collection('analytics_history')
          .count()
          .get()
          .then((snapshot) => snapshot.count ?? 0);

      return {
        'analyticDataRecords': analyticDataCount,
        'hasSummary': summaryDoc.exists,
        'lastSummaryUpdate':
            summaryDoc.exists
                ? (summaryDoc.data()?['lastUpdated']?.toString() ?? 'Unknown')
                : 'Never',

        'historyEntries': historyCount,
        'systemHealth':
            analyticDataCount > 0 && summaryDoc.exists
                ? 'Healthy'
                : 'Needs Setup',
      };
    } catch (e) {
      return {'error': e.toString(), 'systemHealth': 'Error'};
    }
  }
}
